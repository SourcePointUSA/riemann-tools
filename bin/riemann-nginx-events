#!/usr/bin/env ruby

# Gathers nginx status stub statistics and submits them to Riemann.
# See http://wiki.nginx.org/HttpStubStatusModule for configuring Nginx appropriately

require File.expand_path('../../lib/riemann/tools', __FILE__)

class Riemann::Tools::NginxEvents
  include Riemann::Tools
  require 'net/http'
  require 'uri'

  opt :uri, "Nginx Event Buffer URI", :default => 'http://localhost/event_buffers'
  opt :checks, "Which events to report.", :type => :strings, :default => %w{beacon capture}

  def initialize
    @uri = URI.parse(opts[:uri])
    @keys = %w{elapsedtime count average rate}
    @re = /elapsedtime: (\d+)\ncount: (\d+)\naverage: (\d+)\nrate: (\d+)\n/m
    @checks = opts[:checks]
  end

  def state(key, value)
    return 'ok'
  end

  def tick
      @checks.each {|event_type|
        response = nil
        begin
          response = Net::HTTP.get(URI.parse("#{@uri.to_s}?event_type=#{event_type}"))
        rescue => e
          report(
            :service => "nginx events",
            :description => "Connection error: #{e.class} - #{e.message} #{event_type}"
          )
        end

        return if response.nil?

        report(
          :service => "nginx events",
          :state => "ok",
          :description => "Nginx events connection ok"
        )

        values = @re.match(response).to_a[1,5].map { |v| v.to_i }

        @keys.zip(values).each do |key, value|
          report({
            :service => "nginx #{event_type} #{key}",
            :metric  => value,
            :state   => state(key, value),
            :tags    => ['nginx', 'events', event_type]
          })
        end
      }


  end
end

Riemann::Tools::NginxEvents.run

